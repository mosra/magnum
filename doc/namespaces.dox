/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

/** @dir magnum/src/Magnum
 * @brief Namespace @ref Magnum (part of @ref building "Magnum library")
 */
/** @namespace Magnum
@brief Root namespace

Contains classes for interacting with OpenGL.

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building and @ref cmake for more information.
*/

/** @dir Magnum/Platform
 * @brief Namespace @ref Magnum::Platform
 */
/** @namespace Magnum::Platform
@brief Platform-specific application and context creation

Base classes for creating applications with various toolkits.

Parts of this namespace are built if `WITH_*APPLICATION` is enabled when
building Magnum, with each library having specific toolkit dependencies and
platform requirements. To use a particular application library with CMake, you
need to request given `*Application` component of the `Magnum` package and link
to the `Magnum::Application` target. Example using the @ref Platform::Sdl2Application
library:

@code{.cmake}
find_package(Magnum REQUIRED Sdl2Application)

# ...
target_link_libraries(your-app Magnum::Application)
@endcode

See documentation of particular `*Application` classs, the
@ref magnum-gl-info "magnum-gl-info" utility documentation, @ref building,
@ref cmake and @ref platform for more information.
*/

/** @dir Magnum/Math
 * @brief Namespace @ref Magnum::Math, @ref Magnum::Math::Literals
 */
/** @namespace Magnum::Math
@brief Math library

Template classes for matrix and vector calculations.

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building, @ref cmake, @ref matrix-vector and @ref transformations for
more information.
*/
/** @namespace Magnum::Math::Literals
@brief Math literals

Literals for easy construction of angle and color values.

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building, @ref cmake and @ref types for more information.
*/

/** @dir Magnum/Math/Algorithms
 * @brief Namespace @ref Magnum::Math::Algorithms
 */
/** @namespace Magnum::Math::Algorithms
@brief Algorithms

Various matrix and vector algorithms.

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building and @ref cmake for more information.
*/

/** @dir Magnum/Math/Geometry
 * @brief Namespace @ref Magnum::Math::Geometry
 * @deprecated Use @ref Magnum/Math/Distance.h and
        @ref Magnum/Math/Intersection.h instead.
 */
/** @namespace Magnum::Math::Geometry
 * @deprecated Use @ref Magnum::Math::Distance and
        @ref Magnum::Math::Intersection namespaces instead.
 */

/** @namespace Magnum::Math::Distance
@brief Functions for calculating distances

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building and @ref cmake for more information.
*/

/** @namespace Magnum::Math::Intersection
@brief Functions for calculating intersections

This library is built as part of Magnum by default. To use this library with
CMake, you need to find the `Magnum` package and link to the `Magnum::Magnum`
target:

@code{.cmake}
find_package(Magnum REQUIRED)

# ...
target_link_libraries(your-app Magnum::Magnum)
@endcode

See @ref building and @ref cmake for more information.
*/

/** @dir Magnum/Animation
 * @brief Namespace @ref Magnum::Animation
 */
/** @namespace Magnum::Animation
@brief Keyframe-based animation

This library is built as part of Magnum by default. To use it, you need to
find `Magnum` package and link to `Magnum::Magnum` target. See @ref building,
@ref cmake and @ref animation for more information.
@experimental
*/

/** @dir Magnum/Audio
 * @brief Namespace @ref Magnum::Audio, @ref Magnum::Audio::Extensions
 */
/** @namespace Magnum::Audio
@brief Audio playback

Audio import, playback and integration with @ref SceneGraph.

This library depends on the [OpenAL](https://www.openal.org/) library. It is
built if `WITH_AUDIO` is enabled when building Magnum. To use this library with
CMake, you need to request the `Audio` component of the `Magnum` package and
link to the `Magnum::Audio` target:

@code{.cmake}
find_package(Magnum REQUIRED Audio)

# ...
target_link_libraries(your-app Magnum::Audio)
@endcode

Additional plugins and utilities are built separately. See particular
`Audio::*Importer` class documentation, the @ref magnum-al-info "magnum-al-info"
utility documentation, @ref building, @ref building-plugins, @ref cmake,
@ref cmake-plugins and @ref plugins for more information.
*/

/** @dir Magnum/DebugTools
 * @brief Namespace @ref Magnum::DebugTools
 */
/** @namespace Magnum::DebugTools
@brief Debug tools

Debugging helpers, renderers and profilers.

This library is built if `WITH_DEBUGTOOLS` is enabled when building Magnum. To
use this library with CMake, you need to request the `DebugTools` component of
the `Magnum` package and link to the `Magnum::DebugTools` target:

@code{.cmake}
find_package(Magnum REQUIRED DebugTools)

# ...
target_link_libraries(your-app Magnum::DebugTools)
@endcode

See @ref building, @ref cmake and @ref debug-tools for more information.
*/

/** @dir Magnum/GL
 * @brief Namespace @ref Magnum::GL
 */
/** @namespace Magnum::GL
@brief OpenGL wrapping layer

C++11 wrappers around OpenGL objects with state tracking and transparent
extension support.

All of this library except @ref GL::OpenGLTester is built if `WITH_GL` is
enabled when building Magnum. To use this library with CMake, you need to
request the `GL` component of the `Magnum` package and link to the `Magnum::GL`
target:

@code{.cmake}
find_package(Magnum REQUIRED GL)

# ...
target_link_libraries(your-app Magnum::GL)
@endcode

See @ref building, @ref cmake and @ref opengl for more information.
*/

/** @dir Magnum/MeshTools
 * @brief Namespace @ref Magnum::MeshTools
 */
/** @namespace Magnum::MeshTools
@brief Mesh tools

Tools for generating, optimizing and cleaning meshes.

This library is built if `WITH_MESHTOOLS` is enabled when building Magnum. To
use this library with CMake, you need to request the `MeshTools` component of
the `Magnum` package and link to the `Magnum::MeshTools` target:

@code{.cmake}
find_package(Magnum REQUIRED MeshTools)

# ...
target_link_libraries(your-app Magnum::MeshTools)
@endcode

Note that functionality depending on @ref GL APIs is available only if Magnum
is built with both `WITH_GL` and `TARGET_GL` enabled (which is done by
default).

See @ref building and @ref cmake for more information.
*/

/** @dir Magnum/Primitives
 * @brief Namespace @ref Magnum::Primitives
 */
/** @namespace Magnum::Primitives
@brief Primitive library

Basic primitives for testing purposes.

This library is built if `WITH_PRIMITIVES` is enabled when building Magnum. To
use this library with CMake, you need to request the `Primitives` component of
the `Magnum` package and link to the `Magnum::Primitives` target:

@code{.cmake}
find_package(Magnum REQUIRED Primitives)

# ...
target_link_libraries(your-app Magnum::Primitives)
@endcode

See @ref building and @ref cmake for more information.
*/

/** @dir Magnum/SceneGraph
 * @brief Namespace @ref Magnum::SceneGraph
 */
/** @namespace Magnum::SceneGraph
@brief Scene graph library

Managing object hierarchy, transformations and interactions.

This library is built if `WITH_SCENEGRAPH` is enabled when building Magnum. To
use this library with CMake, you need to request the `SceneGraph` component of
the `Magnum` package and link to the `Magnum::SceneGraph` target:

@code{.cmake}
find_package(Magnum REQUIRED SceneGraph)

# ...
target_link_libraries(your-app Magnum::SceneGraph)
@endcode

See @ref building, @ref cmake and @ref scenegraph for more information.
*/

/** @dir Magnum/Shaders
 * @brief Namespace @ref Magnum::Shaders
 */
/** @namespace Magnum::Shaders
@brief Builtin shaders

Collection of shaders for easy prototyping and basic usage.

This library is built if `WITH_SHADERS` is enabled when building Magnum. To
use this library with CMake, you need to request the `Shaders` component of the
`Magnum` package and link to the `Magnum::Shaders` target:

@code{.cmake}
find_package(Magnum REQUIRED Shaders)

# ...
target_link_libraries(your-app Magnum::Shaders)
@endcode

See @ref building, @ref cmake and @ref shaders for more information.
*/

/** @dir Magnum/Shapes
@brief Namespace @ref Magnum::Shapes

@deprecated The @ref Magnum::Shapes library is a failed design experiment and
    is scheduled for removal in a future release. Related geometry algorithms
    were moved to @ref Magnum::Math::Distance and @ref Magnum::Math::Intersection;
    if you need a full-fledged physics library, please have look at
    [Bullet](https://bulletphysics.org), which has Magnum integration in
    @ref Magnum::BulletIntegration, or at [Box2D](https://box2d.org/), which
    has a @ref examples-box2d "Magnum example" as well.
*/
/** @namespace Magnum::Shapes
@brief Shape library

@deprecated This library is a failed design experiment and is scheduled for
    removal in a future release. Related geometry algorithms were moved to
    @ref Math::Distance and @ref Math::Intersection; if you need a full-fledged
    physics library, please have look at [Bullet](https://bulletphysics.org),
    which has Magnum integration in @ref BulletIntegration, or at
    [Box2D](https://box2d.org/), which has a @ref examples-box2d "Magnum example"
    as well.

Collision detection system.

This library is built if `WITH_SHAPES` is enabled when building Magnum. To use
this library with CMake, you need to request the `Shapes` component of the
`Magnum` package and link to the `Magnum::Shapes` target:

@code{.cmake}
find_package(Magnum REQUIRED Shapes)

# ...
target_link_libraries(your-app Magnum::Shapes)
@endcode

See @ref building, @ref cmake and @ref shapes for more information.
*/

/** @dir Magnum/Text
 * @brief Namespace @ref Magnum::Text
 */
/** @namespace Magnum::Text
@brief Text rendering

Font texture creation and text layouting.

This library is built if `WITH_TEXT` is enabled when building Magnum. To use
this library with CMake, you need to request the `Text` component of the
`Magnum` package and link to the `Magnum::Text` target:

@code{.cmake}
find_package(Magnum REQUIRED Text)

# ...
target_link_libraries(your-app Magnum::Text)
@endcode

Additional plugins and utilities are built separately. See particular `*Font`
and `*FontConverter` class documentation, the
@ref magnum-fontconverter "magnum-fontconverter" utility documentation,
@ref building, @ref building-plugins, @ref cmake, @ref cmake-plugins and
@ref plugins for more information.
*/

/** @dir Magnum/TextureTools
 * @brief Namespace @ref Magnum::TextureTools
 */
/** @namespace Magnum::TextureTools
@brief Texture tools

Tools for generating, compressing and optimizing textures.

This library is built if `WITH_TEXTURETOOLS` is enabled when building Magnum.
To use this library with CMake, you need to request the `TextureTools`
component of the `Magnum` package in CMake and link to the
`Magnum::TextureTools` target:

@code{.cmake}
find_package(Magnum REQUIRED TextureTools)

# ...
target_link_libraries(your-app Magnum::TextureTools)
@endcode

Note that functionality depending on @ref GL APIs is available only if Magnum
is built with both `WITH_GL` and `TARGET_GL` enabled (which is done by
default).

Additional utilities are built separately. See the
@ref magnum-distancefieldconverter "magnum-distancefieldconverter" utility
documentation, @ref building and @ref cmake for more information.
*/

/** @dir Magnum/Trade
 * @brief Namespace @ref Magnum::Trade
 */
/** @namespace Magnum::Trade
@brief Data format exchange

Contains plugin interfaces for importing data of various formats and classes
for direct access to the data.

This library is built if `WITH_TRADE` is enabled when building Magnum. To use
this library with CMake, you need to request the `Trade` component of the
`Magnum` package and link to the `Magnum::Trade` target:

@code{.cmake}
find_package(Magnum REQUIRED Trade)

# ...
target_link_libraries(your-app Magnum::Trade)
@endcode

Additional plugins and utilities are built separately. See particular
`Trade::*Importer` and `*ImageConverter` class documentation, the
@ref magnum-imageconverter "magnum-imageconverter" utility documentation,
@ref building, @ref building-plugins, @ref cmake, @ref cmake-plugins and
@ref plugins for more information.
*/

/** @dir Magnum/Vk
 * @brief Namespace @ref Magnum::Vk
 */
/** @namespace Magnum::Vk
@brief Vulkan wrapping layer

C++14 wrappers and helpers for Vulkan development.

This library is built if `WITH_VK` is enabled when building Magnum. To use this
library with CMake, you need to request the `Vk` component of the `Magnum`
package and link to the `Magnum::Vk` target:

@code{.cmake}
find_package(Magnum REQUIRED Vk)

# ...
target_link_libraries(your-app Magnum::Vk)
@endcode

See @ref building, @ref cmake and @ref vulkan for more information.
*/

/** @dir magnum/src/MagnumPlugins
 * @brief Magnum plugins (part of @ref building "Magnum library")
 */

 /** @dir MagnumPlugins/AnyAudioImporter
 * @brief Plugin @ref Magnum::Audio::AnyImporter
 */
/** @dir MagnumPlugins/AnyImageConverter
 * @brief Plugin @ref Magnum::Trade::AnyImageConverter
 */
/** @dir MagnumPlugins/AnyImageImporter
 * @brief Plugin @ref Magnum::Trade::AnyImageImporter
 */
/** @dir MagnumPlugins/AnySceneImporter
 * @brief Plugin @ref Magnum::Trade::AnySceneImporter
 */
/** @dir MagnumPlugins/MagnumFont
 * @brief Plugin @ref Magnum::Text::MagnumFont
 */
/** @dir MagnumPlugins/MagnumFontConverter
 * @brief Plugin @ref Magnum::Text::MagnumFontConverter
 */
/** @dir MagnumPlugins/ObjImporter
 * @brief Plugin @ref Magnum::Trade::ObjImporter
 */
/** @dir MagnumPlugins/TgaImageConverter
 * @brief Plugin @ref Magnum::Trade::TgaImageConverter
 */
/** @dir MagnumPlugins/TgaImporter
 * @brief Plugin @ref Magnum::Trade::TgaImporter
 */
/** @dir MagnumPlugins/WavAudioImporter
 * @brief Plugin @ref Magnum::Audio::WavImporter
 */
